Question: What is the output of this code?

console.log(x);
var x = 5;

a) 5
b) undefined
c) ReferenceError
d) null

---

* Closure 
Question: What does this code output?

function outer() {
  let count = 0;
  return function inner() {
    count++;
    return count;
  };
}

const counter = outer();
console.log(counter(), counter());
a) 1 2
b) 1 1
c) 0 1
d) undefined undefined

---

* Event Loop (later)
Question: What logs first?

setTimeout(() => console.log('A'), 60);
Promise.resolve().then(() => console.log('B'));
console.log('C');
a) A
b) B
c) C
d) Random order


---

*. this Binding
Question: What is this in the arrow function?

const obj = {
  name: 'Alice',
  greet: () => console.log(this.name)
};
obj.greet();

a) undefined
b) 'Alice'
c) window/global object
d) Throws an error


---


* Prototypal Inheritance
Question: What does this output?

function Person(name) {
  this.name = name;
}
Person.prototype.sayHi = function() {
  return `Hi, ${this.name}`;
};

const bob = new Person('Bob');
console.log(bob.hasOwnProperty('sayHi'));
a) true
b) false
c) undefined
d) Throws an error


---


* Object References
Question: What is the output?

const obj1 = { value: 10 };
const obj2 = obj1;
obj2.value = 20;
console.log(obj1.value);
a) 10
b) 20
c) undefined
d) Throws an error


---

*. Array Methods
Question: What does this code return?

const nums = [1, 2, 3].map(num => num * 2).filter(num => num > 3);
a) [4, 6]
b) [2, 4, 6]
c) [6]
d) []


---

* ES6 Modules
Question: How do you import a named export?

export const apiKey = '123';
a) import apiKey from './module'
b) import { apiKey } from './module'
c) import default as apiKey from './module'
d) require('./module').apiKey

---

* Scope
Question: What is the output?

let x = 10;
function test() {
  console.log(x);
  let x = 20;
}
test();
a) 10
b) 20
c) undefined
d) ReferenceError

---

* Object Properties
Question: What does this code output?

const obj = { a: 1 };
obj.b = 2;
console.log(obj['a'], obj.b, obj?.c?.d);
a) 1 2 undefined
b) 1 2 null
c) 1 2 ReferenceError
d) undefined 2 undefined


----

* Arrow Functions
Question: What is the key difference between arrow functions and regular functions?

const arrow = () => this;
function regular() { return this; }
a) Arrow functions have their own this binding
b) Regular functions inherit this from parent scope
c) Arrow functions inherit this from parent scope
d) Both have identical this binding


---

function sumArray(arr) {
  
  return arr.reduce((sum, num) => ______, 0);
}

---

function hasProperty(obj, prop) {
  
  return ______;
}

---

function capitalize(str) {
  
  return ______ + str.slice(1);
}

---

function createCounter() {
  let count = 0;
  return function() {
    
    ______;
    return count;
  };
}


---

function filterEvens(arr) {
  
  return arr.filter(______);
}

---

function findMax(numbers) {
  
  return Math.______(...numbers);
}

----

function reverseString(str) {
 
  return str.______('').______().______('');
}


---

1. Merge Arrays with Spread
Task: Complete the function to merge two arrays and remove duplicates

function mergeUnique(arr1, arr2) {
 
  return [...______];
}


--

2. Rest Parameters for Sum
Task: Complete the function to sum unlimited numbers using rest params


function sum(...numbers) {
  
  return numbers.______((a, b) => ______, 0);
}


---

3. Clone and Update Object
Task: Clone an object and override specific properties

function updateUser(user, updates) {
  
  return { ______, ...______ };
}


---

1. Immutable Add (Arrays)
Challenge: Add an element to an array without mutating the original

const original = ['a', 'b', 'c'];
// Add 'd' immutably:
const updated = ______;


---

3. Immutable Array Remove
Function: Remove item by index without mutation

javascript
function removeFromArray(arr, indexToRemove) {
  return arr.filter((_, index) => index !== indexToRemove);
  // Alternative 
  // return [...arr.slice(0, indexToRemove), ...arr.slice(indexToRemove + 1)];
}

