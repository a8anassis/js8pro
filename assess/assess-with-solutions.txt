Question: What is the output of this code?

console.log(x);
var x = 5;

a) 5
b) undefined
c) ReferenceError
d) null

Answer: b) undefined
Explanation: Due to hoisting, the variable declaration (var x) is moved to the top, but initialization remains in place.


---

2. Closure Concept
Question: What does this code output?

function outer() {
  let count = 0;
  return function inner() {
    count++;
    return count;
  };
}

const counter = outer();
console.log(counter(), counter());
a) 1 2
b) 1 1
c) 0 1
d) undefined undefined

Answer: a) 1 2
Explanation: The closure preserves the count variable between invocations.

---


3. Event Loop
Question: What logs first?

setTimeout(() => console.log('A'), 60);
Promise.resolve().then(() => console.log('B'));
console.log('C');
a) A
b) B
c) C
d) Random order

Answer: c) C
Explanation: The event loop processes:

Synchronous code (C)

Microtasks (Promises, B)

Macrotasks (setTimeout, A)

---

4. this Binding
Question: What is this in the arrow function?

const obj = {
  name: 'Alice',
  greet: () => console.log(this.name)
};
obj.greet();

a) undefined
b) 'Alice'
c) window/global object
d) Throws an error

Answer: a) undefined
Explanation: Arrow functions inherit this from their lexical scope (global/window here).


---


5. Prototypal Inheritance
Question: What does this output?

function Person(name) {
  this.name = name;
}
Person.prototype.sayHi = function() {
  return `Hi, ${this.name}`;
};

const bob = new Person('Bob');
console.log(bob.hasOwnProperty('sayHi'));
a) true
b) false
c) undefined
d) Throws an error

Answer: b) false
Explanation: sayHi is on the prototype, not the instance itself.


---


7. Object References
Question: What is the output?

const obj1 = { value: 10 };
const obj2 = obj1;
obj2.value = 20;
console.log(obj1.value);
a) 10
b) 20
c) undefined
d) Throws an error

Answer: b) 20
Explanation: Objects are passed by reference - both variables point to the same object.


---

8. Array Methods
Question: What does this code return?

const nums = [1, 2, 3].map(num => num * 2).filter(num => num > 3);
a) [4, 6]
b) [2, 4, 6]
c) [6]
d) []

Answer: a) [4, 6]
Explanation: map doubles each value ([2,4,6]), then filter keeps values >3.

---

9. ES6 Modules
Question: How do you import a named export?

// module.js
export const apiKey = '123';
a) import apiKey from './module'
b) import { apiKey } from './module'
c) import default as apiKey from './module'
d) require('./module').apiKey

Answer: b) import { apiKey } from './module'
Explanation: Curly braces are required for named imports.

---

10. Scope
Question: What is the output?

let x = 10;
function test() {
  console.log(x);
  let x = 20;
}
test();
a) 10
b) 20
c) undefined
d) ReferenceError

Answer: d) ReferenceError
Explanation: The local x is hoisted but not initialized (temporal dead zone).

---

13. Object Properties
Question: What does this code output?

const obj = { a: 1 };
obj.b = 2;
console.log(obj['a'], obj.b, obj?.c?.d);
a) 1 2 undefined
b) 1 2 null
c) 1 2 ReferenceError
d) undefined 2 undefined

Answer: a) 1 2 undefined
Explanation: Optional chaining (?.) safely returns undefined for non-existent properties.

----

15. Arrow Functions
Question: What is the key difference between arrow functions and regular functions?

const arrow = () => this;
function regular() { return this; }
a) Arrow functions have their own this binding
b) Regular functions inherit this from parent scope
c) Arrow functions inherit this from parent scope
d) Both have identical this binding

Answer: c) Arrow functions inherit this from parent scope. 
Regular functions: this is dynamic (depends on the call site).
Arrow functions: this is lexical (taken from where the function was created).
Explanation: Arrow functions don't have their own this - they use the enclosing context's this.


---


function sumArray(arr) {
  // Student should complete this
  return arr.reduce((sum, num) => ______, 0);
}

// Solution:
return arr.reduce((sum, num) => sum + num, 0);

---

function hasProperty(obj, prop) {
  // Student should complete this
  return ______;
}

// Solution:
return prop in obj;
// OR
return obj.hasOwnProperty(prop);

---

function capitalize(str) {
  // Student should complete this
  return ______ + str.slice(1);
}

// Solution:
return str.charAt(0).toUpperCase() + str.slice(1);


---

function createCounter() {
  let count = 0;
  return function() {
    // Student should complete this
    ______;
    return count;
  };
}

// Solution:
count++;
// OR
count += 1;

---

function filterEvens(arr) {
  // Student should complete this
  return arr.filter(______);
}

// Solution:
return arr.filter(num => num % 2 === 0);

---

function findMax(numbers) {
  // Complete this
  return Math.______(...numbers);
}

// Solution:
return Math.max(...numbers);

----

function reverseString(str) {
  // Complete this
  return str.______('').______().______('');
}

// Solution:
return str.split('').reverse().join('');

---

1. Merge Arrays with Spread
Task: Complete the function to merge two arrays and remove duplicates

function mergeUnique(arr1, arr2) {
  // Complete using spread
  return [...______];
}

// Solution:
return [...new Set([...arr1, ...arr2])];

--

2. Rest Parameters for Sum
Task: Complete the function to sum unlimited numbers using rest params


function sum(...numbers) {
  // Complete using reduce
  return numbers.______((a, b) => ______, 0);
}

// Solution:
return numbers.reduce((a, b) => a + b, 0);

---

3. Clone and Update Object
Task: Clone an object and override specific properties

function updateUser(user, updates) {
  // Complete using object spread
  return { ______, ...______ };
}

// Solution:
return { ...user, ...updates };

---

1. Immutable Add (Arrays)
Challenge: Add an element to an array without mutating the original

const original = ['a', 'b', 'c'];
// Add 'd' immutably:
const updated = ______;

// Solution:
const updated = [...original, 'd']; // or original.concat('d')

---

3. Immutable Array Remove
Function: Remove item by index without mutation

function removeFromArray(arr, indexToRemove) {
  return arr.filter((_, index) => index !== indexToRemove);
  // Alternative for precise removal:
  // return [...arr.slice(0, indexToRemove), ...arr.slice(indexToRemove + 1)];
}

// Usage
const colors = ['red', 'green', 'blue'];
const filtered = removeFromArray(colors, 1);
console.log(colors);  // ['red', 'green', 'blue'] (unchanged)
console.log(filtered); // ['red', 'blue']